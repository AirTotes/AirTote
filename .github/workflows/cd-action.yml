name: Continuous Delivery Action

on:
  push:
    branches:
      - main
    tags:
      - 'bundle[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    types:
      - opened
      - synchronize
      - unlabeled
  workflow_dispatch:

env:
  CSPROJ_PATH: ./AirTote/AirTote.csproj
  THIRD_PARTY_LICENSE_INFO_DIR: ./AirTote/Assets/Raw/ThirdPartyLicenses
  THIRD_PARTY_LICENSE_LIST_NAME: third_party_license_list
  TARGET_FRAMEWORK: net6.0-ios15.4
  TARGET_RUNTIME: ios-arm64
  IPA_PATH: ./AirTote/bin/Publish/net6.0-ios15.4/ios-arm64/publish/AirTote.ipa

jobs:
  generate-bundle-version:
    if: |
      !startsWith(github.ref, 'refs/tags/bundle')
      && (
        github.event_name != 'pull_request'
        || (github.event.action != 'unlabeled' && !contains(github.event.pull_request.labels.*.name, 'WIP'))
        || (github.event.action == 'unlabeled' && github.event.label.name == 'WIP')
      )
      && !cancelled()

    runs-on: ubuntu-latest
    timeout-minutes: 5

    outputs:
      display_version: ${{ steps.set_display_version.outputs.disp-version }}
      bundle_version: ${{ steps.set_version_number.outputs.version }}

    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{github.head_ref}}

    - name: Get all tags from remote
      run: git fetch --all --tags

    - name: generate bundle version pattern (Trigger:Push to main)
      if: ${{ github.event_name == 'push' }}
      run: grep -oP '(?<=<ApplicationDisplayVersion>).*?(?=</ApplicationDisplayVersion>)' ${{ env.CSPROJ_PATH }} > BUNDLE_VERSION_MAJOR_MINOR

    - name: generate bundle version pattern (Trigger:PullRequest)
      if: ${{ github.event_name == 'pull_request' }}
      run: echo "0.${{ github.event.number }}" > BUNDLE_VERSION_MAJOR_MINOR

    - name: generate bundle version pattern (Trigger:WorkflowDispatch)
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: echo "0.0.1" > BUNDLE_VERSION_MAJOR_MINOR

    - name: set major/minor version to variable
      id: set_display_version
      run: |
        echo "::set-output name=disp-version::$(cat BUNDLE_VERSION_MAJOR_MINOR)"
        echo "::set-output name=major-minor-version::$(cat BUNDLE_VERSION_MAJOR_MINOR | awk -F '.' '{print $1 "." $2}')"

    - name: Get all tags reachable from current commit
      run: |
        git tag -l "bundle${{ steps.set_display_version.outputs.major-minor-version }}.[0-9]*" > BUNDLE_VERSIONS
        cat BUNDLE_VERSIONS

    - name: Generate new patch version number
      id: patch_version
      run: |
        if [ `cat BUNDLE_VERSIONS | wc -l` -eq 0 ]; then
          PATCH_VERSION=0
        else
          PATCH_VERSION=`sort -rV BUNDLE_VERSIONS | head -n 1 | awk -F '.' '{print $3 + 1}'`
        fi
        echo "::set-output name=version::$PATCH_VERSION"

    - name: set version number
      id: set_version_number
      run: echo "::set-output name=version::${{ steps.set_display_version.outputs.major-minor-version }}.${{ steps.patch_version.outputs.version }}"

    - name: print new version number
      run: echo "VersionNumber (Bundle Version) ... ${{ steps.set_version_number.outputs.version }}"

  generate-third-party-license-info:
    if: |
      (
        github.event_name != 'pull_request'
        || (github.event.action != 'unlabeled' && !contains(github.event.pull_request.labels.*.name, 'WIP'))
        || (github.event.action == 'unlabeled' && github.event.label.name == 'WIP')
      )
      && !cancelled()

    runs-on: [self-hosted, macOS]
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'

    - name: Install dotnet workloads
      run: dotnet workload install maui maui-ios maui-android
    - name: Restore dotnet packages
      run: dotnet restore ${{ env.CSPROJ_PATH }} -r ${{ env.TARGET_RUNTIME }}

    - name: Prapare Python Package
      run: |
        python --version
        python -m pip install aiofiles aiohttp

    - name: Dump Third Party License Info
      run: |
        python ./tools/getThirdPartyLicenseJson.py ${{ env.TARGET_FRAMEWORK }} ${{ env.THIRD_PARTY_LICENSE_INFO_DIR }}
        ls -l ${{ env.THIRD_PARTY_LICENSE_INFO_DIR }}

    - name: Print Third Party License Info Files
      run: cat ${{ env.THIRD_PARTY_LICENSE_INFO_DIR }}/${{ env.THIRD_PARTY_LICENSE_LIST_NAME }}.json

    - name: Upload Third Party License Info
      uses: actions/upload-artifact@v3.0.0
      with:
        name: third_party_license
        path: ${{ env.THIRD_PARTY_LICENSE_INFO_DIR }}
        retention-days: 3

  build-publish-ios:
    if: |
      !failure() && 
      (
        !contains(needs.*.result, 'failure')
        && !contains(needs.*.result, 'cancelled')
      )
      && (
        github.event_name != 'pull_request'
        || (github.event.action != 'unlabeled' && !contains(github.event.pull_request.labels.*.name, 'WIP'))
        || (github.event.action == 'unlabeled' && github.event.label.name == 'WIP')
      )
      && !cancelled()

    runs-on: [self-hosted, macOS]
    timeout-minutes: 20
    needs:
      - generate-bundle-version
      - generate-third-party-license-info

    steps:
    - name: get version
      id: get-version
      run: |
        if [ '${{ startsWith(github.ref, 'refs/tags/bundle') }}' == 'true' ]; then
          VERSION=`echo '${{ github.ref }}' | tr -d 'refs/tags/bundle'`
          echo "::set-output name=bundle_version::$VERSION"
          echo "::set-output name=display_version::$(echo $VERSION | awk -F '.' '{print $1 "." $2}')"
        else
          echo "::set-output name=bundle_version::${{ needs.generate-bundle-version.outputs.bundle_version }}"
          echo "::set-output name=display_version::${{ needs.generate-bundle-version.outputs.display_version }}"
        fi

    - uses: actions/checkout@v2

    - name: Download Third Party License Info
      uses: actions/download-artifact@v3
      with:
        name: third_party_license
        path: ${{ env.THIRD_PARTY_LICENSE_INFO_DIR }}

    - name: Install dependencies
      run: dotnet restore ${{ env.CSPROJ_PATH }} -r ${{ env.TARGET_RUNTIME }}

    - name: Build
      run: >
        dotnet publish ${{ env.CSPROJ_PATH }}
        -f ${{ env.TARGET_FRAMEWORK }}
        -r ${{ env.TARGET_RUNTIME }}
        -c Publish
        /p:ApplicationVersion=${{ steps.get-version.outputs.bundle_version }}
        /p:ApplicationDisplayVersion=${{ steps.get-version.outputs.display_version }}
    
    - name: validate
      run: >
        xcrun altool
        --validate-app
        --type ios
        -f ${{ env.IPA_PATH }}
        --apiKey ${{ secrets.APPSTORECONNECT_API_KEY }}
        --apiIssuer ${{ secrets.APPSTORECONNECT_ISSUER_ID }}

    - name: upload
      run: >
        xcrun altool
        --upload-app
        --type ios
        -f ${{ env.IPA_PATH }}
        --apiKey ${{ secrets.APPSTORECONNECT_API_KEY }}
        --apiIssuer ${{ secrets.APPSTORECONNECT_ISSUER_ID }}

    - name: Upload IPA
      uses: actions/upload-artifact@v3.0.0
      with:
        name: ipa
        path: ${{ env.IPA_PATH }}
        retention-days: 3

  set-tag:
    if: |
      needs.generate-bundle-version.result == 'success'
      && needs.build-publish-ios.result == 'success'
      && !cancelled()

    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      - generate-bundle-version
      - build-publish-ios

    steps:
    - uses: actions/checkout@v3
    - name: fetch all history to assign tag
      if: ${{ github.event_name == 'pull_request' }}
      run: git fetch --unshallow --no-tags --no-recurse-submodules origin +${{ github.sha }}:${{ github.ref }}

    - name: Setup github-actions[bot] account
      run: |
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'

    - name: set PR number
      id: pr-num
      if: ${{ github.event_name == 'pull_request' }}
      run: echo "::set-output name=str::#${{ github.event.number }}"

    - name: generate tag name
      id: tag-name
      run: echo "::set-output name=tag-name::bundle${{ needs.generate-bundle-version.outputs.bundle_version }}"

    - name: tagging new tag
      run: git tag -a ${{ steps.tag-name.outputs.tag-name }} -m "Auto Generated tag ${{ steps.pr-num.outputs.str }} ( https://github.com/${{github.repository}}/actions/runs/${{github.run_id}} )"

    - name: push new tag
      run: git push origin ${{ steps.tag-name.outputs.tag-name }}
    
    - name: Comment TagName and Actions-Run URL to PR
      if: ${{ github.event_name == 'pull_request' }}
      run: >
        echo Tag \`${{ steps.tag-name.outputs.tag-name }}\` was automatically created and pushed with
        ... https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
        | gh pr comment ${{ github.event.number }} -F -
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dump-context:
    if: |
      !(
        github.event_name == 'pull_request'
        && contains(github.event.pull_request.labels.*.name, 'WIP')
      )

    runs-on: self-hosted
    timeout-minutes: 1
    steps:
      - name: dump `github` context
        env:
          __CONTEXT: ${{ toJSON(github) }}
        run: echo "$__CONTEXT"
